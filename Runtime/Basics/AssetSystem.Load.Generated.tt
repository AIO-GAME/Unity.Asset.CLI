<#@ template debug="false" hostspecific="true" language="C#" linePragmas="true" visibility="public" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections"#>
<#@ import namespace="System.Collections.Generic" #>

<#
    var types = new (string typeName, string aliasName)[]
    {
        ("UnityEngine.Shader", "Shader"),
        ("UnityEngine.AudioClip", "AudioClip"),
        ("UnityEngine.TextAsset", "TextAsset"),
        ("UnityEngine.Material", "Material"),
        ("UnityEngine.AssetBundle", "AssetBundle"),
        ("UnityEngine.Animation", "Animation"),
        ("UnityEngine.Texture", "Texture"),
        ("UnityEngine.Texture2D", "Texture2D"),
        ("UnityEngine.Font", "Font"),
        ("UnityEngine.Mesh", "Mesh"),
        ("UnityEngine.GameObject", "GameObject"),
    };
#>

/*|✩ - - - - - |||
|||✩ Author:   ||| -> XINAN
|||✩ Date:     ||| -> Automatic Generate
|||✩ Document: ||| ->
|||✩ - - - - - |*/

using System;
using System.Collections;
using System.Threading.Tasks;
using UnityEngine;

namespace AIO
{
    public partial class AssetSystem
    {

<#
    foreach (var (typeName, aliasName) in types)
    {
#>
        #region <#= aliasName #>

        /// <summary>
        /// 同步加载 <see cref="<#= typeName #>"/>
        /// </summary>
        /// <param name="location">资源的定位地址</param>
        public static <#= typeName #> Load<#= aliasName #>(string location)
        {
            return Proxy.LoadAssetSync<<#= typeName #>>(Parameter.LoadPathToLower ? location.ToLower() : location);
        }

        /// <summary>
        /// 异步回调加载 <see cref="<#= typeName #>"/>
        /// </summary>
        /// <param name="location">资源的定位地址</param>
        /// <param name="cb">回调</param>
        public static async void Load<#= aliasName #>(string location, Action<<#= typeName #>> cb)
        {
            cb.Invoke(await Proxy.LoadAssetTask<<#= typeName #>>(Parameter.LoadPathToLower ? location.ToLower() : location));
        }

        /// <summary>
        /// 异步加载 <see cref="<#= typeName #>"/>
        /// </summary>
        /// <param name="location">资源的定位地址</param>
        public static Task<<#= typeName #>> Load<#= aliasName #>Task(string location)
        {
            return Proxy.LoadAssetTask<<#= typeName #>>(Parameter.LoadPathToLower ? location.ToLower() : location);
        }

        /// <summary>
        /// 异步回调加载 <see cref="<#= typeName #>"/>
        /// </summary>
        /// <param name="location">资源的定位地址</param>
        /// <param name="cb">回调</param>
        public static IEnumerator Load<#= aliasName #>CO(string location, Action<<#= typeName #>> cb)
        {
            return Proxy.LoadAssetCO(Parameter.LoadPathToLower ? location.ToLower() : location, cb);
        }

       #endregion

<#
    }
#>
    }
}
